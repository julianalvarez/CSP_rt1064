/***********************************************************************************************************************
 * This file was generated by the MCUXpresso Config Tools. Any manual edits made to this file
 * will be overwritten if the respective MCUXpresso Config Tools is used to update this file.
 **********************************************************************************************************************/

#ifndef _PERIPHERALS_H_
#define _PERIPHERALS_H_

/***********************************************************************************************************************
 * Included files
 **********************************************************************************************************************/
#include "fsl_common.h"
#include "fsl_lpuart.h"
#include "fsl_clock.h"
#include "fsl_flexcan.h"
#include "fsl_adc.h"
#include "fsl_pwm.h"
#include "fsl_flexspi.h"

#if defined(__cplusplus)
extern "C" {
#endif /* __cplusplus */

/***********************************************************************************************************************
 * Definitions
 **********************************************************************************************************************/
/* Definitions for BOARD_InitUART functional group */
/* Definition of peripheral ID */
#define BOARD_LPUART1_PERIPHERAL LPUART1
/* Definition of the clock source frequency */
#define BOARD_LPUART1_CLOCK_SOURCE 80000000UL

/* Definitions for BOARD_InitCAN2 functional group */
/* Definition of peripheral ID */
#define BOARD_CAN2_PERIPHERAL CAN2
/* Definition of the clock source frequency */
#define BOARD_CAN2_CLOCK_SOURCE 40000000UL
/* CAN2 interrupt vector ID (number). */
#define BOARD_CAN2_FLEXCAN_IRQN CAN2_IRQn
/* CAN2 interrupt handler identifier. */
#define BOARD_CAN2_FLEXCAN_IRQHANDLER CAN2_IRQHandler

/* Definitions for BOARD_InitADC1 functional group */
/* BOARD_InitADC1 defines for ADC1 */
/* Definition of peripheral ID */
#define BOARD_ADC1_PERIPHERAL ADC1
/* Definition of special channel interconnected with ADC_ETC which takes real channel to be measured from ADC_ETC. */
#define BOARD_ADC1_CHANNEL_DRIVEN_BY_ADC_ETC 16U
/* Channel 0 (IN.0) conversion control group. */
#define BOARD_ADC1_CH0_CONTROL_GROUP 0U
/* Channel 1 (IN.9) conversion control group. */
#define BOARD_ADC1_CH1_CONTROL_GROUP 0U

/* Definitions for BOARD_InitPWM functional group */
/* Definition of peripheral ID */
#define BOARD_PWM1_PERIPHERAL PWM1
/* Definition of submodule 0 ID */
#define BOARD_PWM1_SM0 kPWM_Module_0
/* Definition of clock source of submodule 0 frequency in Hertz */
#define BOARD_PWM1_SM0_SM_CLK_SOURCE_FREQ_HZ 150000000U
/* Definition of submodule 0 counter clock source frequency in Hertz - BOARD_PWM1_SM0_SM_CLK_SOURCE_FREQ_HZ divided by prescaler */
#define BOARD_PWM1_SM0_COUNTER_CLK_SOURCE_FREQ_HZ 150000000U
/* Definition of submodule 0 counter (PWM) frequency in Hertz */
#define BOARD_PWM1_SM0_COUNTER_FREQ_HZ 12000U
/* Definition of submodule 0 channel A ID */
#define BOARD_PWM1_SM0_A kPWM_PwmA
/* Definition of submodule 0 channel B ID */
#define BOARD_PWM1_SM0_B kPWM_PwmB
/* Definition of submodule 0 channel X ID */
#define BOARD_PWM1_SM0_X kPWM_PwmX
/* Definition of fault Fault0 ID */
#define BOARD_PWM1_F0_FAULT0 kPWM_Fault_0
/* Definition of fault Fault1 ID */
#define BOARD_PWM1_F0_FAULT1 kPWM_Fault_1
/* Definition of fault Fault2 ID */
#define BOARD_PWM1_F0_FAULT2 kPWM_Fault_2
/* Definition of fault Fault3 ID */
#define BOARD_PWM1_F0_FAULT3 kPWM_Fault_3

/* Definitions for BOARAD_InitSPI2 functional group */
/* Definition of peripheral ID */
#define BOARD_FLEXSPI2_PERIPHERAL FLEXSPI2
/* Size of LUT (Look-up Table) */
#define BOARD_FLEXSPI2_LUT_LENGTH 64
/* Read LUT sequence id in lookupTable stored in config block. */
#define NOR_CMD_LUT_SEQ_IDX_READ_NORMAL 7
/* Read Status LUT sequence id in lookupTable stored in config block. */
#define NOR_CMD_LUT_SEQ_IDX_READ_FAST 13
/*  */
#define NOR_CMD_LUT_SEQ_IDX_READ_FAST_QUAD 0
/*  */
#define NOR_CMD_LUT_SEQ_IDX_READSTATUS 1
/*  */
#define NOR_CMD_LUT_SEQ_IDX_WRITEENABLE 2
/*  */
#define NOR_CMD_LUT_SEQ_IDX_ERASESECTOR 3
/*  */
#define NOR_CMD_LUT_SEQ_IDX_PAGEPROGRAM_SINGLE 6
/*  */
#define NOR_CMD_LUT_SEQ_IDX_PAGEPROGRAM_QUAD 4
/*  */
#define NOR_CMD_LUT_SEQ_IDX_READID 8
/*  */
#define NOR_CMD_LUT_SEQ_IDX_WRITESTATUSREG 9
/*  */
#define NOR_CMD_LUT_SEQ_IDX_ENTERQPI 10
/*  */
#define NOR_CMD_LUT_SEQ_IDX_EXITQPI 11
/*  */
#define NOR_CMD_LUT_SEQ_IDX_READSTATUSREG 12
/*  */
#define NOR_CMD_LUT_SEQ_IDX_ERASECHIP 5
/* FLEXSPI2 interrupt vector ID (number). */
#define BOARD_FLEXSPI2_IRQN FLEXSPI_IRQn
/* FLEXSPI2 interrupt handler identifier. */
#define BOARD_FLEXSPI2_IRQHANDLER 

/***********************************************************************************************************************
 * Global variables
 **********************************************************************************************************************/
extern const lpuart_config_t BOARD_LPUART1_config;
extern const flexcan_config_t BOARD_CAN2_config;
/* Message buffer 1 configuration structure */
extern const flexcan_rx_mb_config_t BOARD_CAN2_rx_mb_config_1;
extern const adc_config_t BOARD_ADC1_config;
extern const adc_channel_config_t BOARD_ADC1_channels_config[2];
extern pwm_config_t BOARD_PWM1_SM0_config;

extern pwm_signal_param_t BOARD_PWM1_SM0_pwm_function_config[1];
extern const pwm_fault_input_filter_param_t BOARD_PWM1_faultInputFilter_config;
extern const pwm_fault_param_t BOARD_PWM1_Fault0_fault_config;
extern const pwm_fault_param_t BOARD_PWM1_Fault1_fault_config;
extern const pwm_fault_param_t BOARD_PWM1_Fault2_fault_config;
extern const pwm_fault_param_t BOARD_PWM1_Fault3_fault_config;
extern const flexspi_config_t BOARD_FLEXSPI2_config;
extern const uint32_t BOARD_FLEXSPI2_LUT[BOARD_FLEXSPI2_LUT_LENGTH];

/***********************************************************************************************************************
 * Initialization functions
 **********************************************************************************************************************/

void BOARD_InitUART(void);

void BOARD_InitCAN2(void);

void BOARD_InitADC1(void);

void BOARD_InitPWM(void);

void BOARAD_InitSPI2(void);

/***********************************************************************************************************************
 * BOARD_InitBootPeripherals function
 **********************************************************************************************************************/
void BOARD_InitBootPeripherals(void);

#if defined(__cplusplus)
}
#endif

#endif /* _PERIPHERALS_H_ */
